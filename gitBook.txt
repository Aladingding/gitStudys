


$ mkdir learngit
创建一个版本库

$ cd learngit
跳转到该版本库


$ git add readme.txt
添加一个文件到仓库
执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。

·  git add -A  提交所有变化

·  git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)

·  git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件


所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。



新增了修改内容并提交到了缓存区，想要撤销
git add readme.txt
git reset HEAD
git reset -- readme.txt




删除文件
$ git add test.txt

$ git status
$ git commit -m "add test.txt"
$ rm test.txt

从版本库删除
$ git rm test.txt
rm 'test.txt'

复原不删除了
$ git checkout -- test.txt
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。


配置账户信息
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。

注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。

$ git commit -m "wrote a readme file"
提交文件到仓库


提交本地分支代码到远程仓库
$ git push -u origin master

$ git status
查看仓库状态

$ git diff readme.txt
文件对比

$ git log
查看提交日志

$ git log --pretty=oneline

$ git reset --hard HEAD^
回退到上一个版本
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

$ git reset --hard 1094a
回到固定的某个版本，只要窗口还未关闭
最新的那个版本append GPL已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？

办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是1094adb...，于是就可以指定回到未来的某个版本：

$ git reflog
后悔药
在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：



$ pwd
/Users/michael/learngit
显示当前目录

如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。


git init
初始化仓库

ls -ah
如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。


$ touch+文件名
创建文件

vi+文件名，新建一个文件并进入编辑状态（如果文件已存在，则直接进入编辑状态）


输入i直接进入编辑模式，esc 退出编辑

1，q 退出编辑，如果文本内容被修改过，则会报错

2，q! 强制退出编辑，如果文本内容被修改过，会丢弃此次的修改

3，x 退出编辑并保存



创建远程仓库


用户主目录里找到.ssh目录，就是
C:\Users\80011266\.ssh当前账户下的




…or create a new repository on the command line
echo "# gitStudy" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Aladingding/gitStudy.git
git push -u origin master


…or push an existing repository from the command line
git remote add origin https://github.com/Aladingding/gitStudy.git
git push -u origin master


…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.


创建与合并分支
阅读: 999274
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：

git-br-initial

每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：

 当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：

git-br-create

你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！

不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：

git-br-dev-fd

假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：

git-br-ff-merge

所以Git合并分支也很快！就改改指针，工作区内容也不变！

合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：

git-br-rm

真是太神奇了，你看得出来有些提交是通过分支完成的吗？

下面开始实战。

首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev
Switched to branch 'dev'
然后，用git branch命令查看当前分支：

$ git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

Creating a new branch is quick.
然后提交：

$ git add readme.txt
$ git commit -m "branch test"
[dev b17d20e] branch test
 1 file changed, 1 insertion(+)
现在，dev分支的工作完成，我们就可以切换回master分支：

$ git checkout master
Switched to branch 'master'
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：

git-br-on-master

现在，我们把dev分支的工作成果合并到master分支上：

$ git merge dev
Updating d46f35e..b17d20e
Fast-forward
 readme.txt | 1 +
 1 file changed, 1 insertion(+)
git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。

合并完成后，就可以放心地删除dev分支了：

$ git branch -d dev
Deleted branch dev (was b17d20e).
删除后，查看branch，就只剩下master分支了：

$ git branch
* master
因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

小结
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>





提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：


当你要删除文件的时候，可以采用命令：rm test.txt

这个时候有两种情况

第一种情况:的确要把test.txt删掉，那么可以执行
                   git rm test.txt
                   git commit -m "remove test.txt"
                   文件被删除，且删除记录上传本地库

第二种情况:误删文件，想恢复，这时候还没有commit -m "remove test.txt"，执行git checkout test.txt将文件恢复。

如果执行完git commit -m "remove test.txt"后就不能用checkout恢复了，得用git reset --hard HEAD^



我要添加markdown Git（1）这个文件。操作是：git add markdown" "Git(1)

系统报错：bash:syntax error near unexpected token ('
经过查询，找到了报错的原因。

Git命令（或者所有的shell命令中）中出现括“（）”时系统把它看做一个有特殊意义的命令从而尝试去执行它。因此如果文件名中出现括号，系统找不到括号里要执行的命令就会报错。我们要让系统忽略括号的特殊意义，方法是用“”双引号把文件名括起来，或者用转义符将括号转义.

正确的做法是：
git add markdown" "Git"(1).md
Or
git add markdown" "Git\(1\).md



删除远程分支
可以用git push origin :dev 删除远程分支dev，origin和:dev之间有空格

本地用git branch -d dev删除dev分支
本地操作完之后，用git push origin master推送到远程GitHub上就行。




撤销篇

$ git commit --amend
有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 
此时，可以运行带有 --amend 选项的提交命令尝试重新提交：

$ git commit -m 'commit reason'
$ git add forgotten_file
$ git commit --amend


获取篇

$ git fetch [remote-name]
这个命令会访问远程仓库，从中拉取所有你还没有的数据。 
执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。

$ git pull
自动拉取远程分支，并合并到本地分支

$ git clone 
命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）。


推送篇
$ git push origin master
语法：git push [remote-name] [branch-name]

$ git remote show origin
语法：git remote show [remote-name] 
查看远程仓库


$ git remote rename pb paul
$ git remote
origin
paul
如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。 
例如，想要将 pb 重命名为 paul，可以用 git remote rename，如上，
值得注意的是这同样也会修改你的远程分支名字。 那些过去引用 pb/master 的现在会引用 paul/master

$ git remote rm paul
$ git remote
origin
删除名为paul的远程仓库


打标签

$ git push origin [tagname]
共享标签
默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 
这个过程就像共享远程分支一样 - 你可以运行 git push origin [tagname]

$ git checkout -b version2 v2.0.0
git checkout -b [branchname] [tagname] 

在 Git 中你并不能真的检出一个标签，因为它们并不能像分支一样来回移动。 如果你想要工作目录与仓库中特定的标签版本完全一样，
可以使用 git checkout -b [branchname] [tagname] 在特定的标签上创建一个新分支：
